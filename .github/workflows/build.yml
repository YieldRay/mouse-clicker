name: Build

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  APP_NAME: mouse-clicker

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ${{ env.APP_NAME }}-windows-x64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: ${{ env.APP_NAME }}-windows-arm64.exe

          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ${{ env.APP_NAME }}-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: ${{ env.APP_NAME }}-macos-arm64

          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ${{ env.APP_NAME }}-linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: ${{ env.APP_NAME }}-linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Platform-specific dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxdo-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install Linux ARM64 cross-compilation tools
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Install Windows ARM64 tools
        if: matrix.os == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc'
        run: |
          # Windows ARM64 cross-compilation is supported natively by MSVC
          echo "Windows ARM64 target configured"

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose
        continue-on-error: false

      - name: Verify binary exists
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ls -la target/${{ matrix.target }}/release/${{ env.APP_NAME }}.exe
          else
            ls -la target/${{ matrix.target }}/release/${{ env.APP_NAME }}
          fi
        shell: bash

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\${{ env.APP_NAME }}.exe ${{ matrix.name }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/${{ env.APP_NAME }} ${{ matrix.name }}
          chmod +x ${{ matrix.name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Delete existing release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete existing release and tag if they exist
          gh release delete v0.0.0 --yes || true
          git push --delete origin v0.0.0 || true

      - name: Create new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create new tag
          git tag v0.0.0
          git push origin v0.0.0

          # Create release with all binaries
          gh release create v0.0.0 \
            --title "Mouse Clicker v0.0.0"
